"
" Tureba's base vimrc
"
"   To use it, place the whole repo in ~/.config/vim and resource
"   the shell
"
" who: Arthur Nascimento <tureba@gmail.com>
" where: github.com/tureba/myconfigfiles
"

" Forget about vi and set it first as it modifies future behaviour
set nocompatible

" vim's runtime infos
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

" swap files location
set directory=$XDG_CACHE_HOME/vim//

" backup before writing but erase it afterwards
set nobackup writebackup backupdir=$XDG_CACHE_HOME/vim

if version >= 730
  " undo persistance
  set undofile undodir=$XDG_CACHE_HOME/vim
endif

" where to look for resources
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
" additional directories for pathogen (distro dependent)
" Exherbo/CentOS
set runtimepath+=/usr/share/vim/vimfiles
" OpenSUSE/Fedora
set runtimepath+=/usr/share/vim/current
" Ubuntu/Debian
set runtimepath+=/usr/share/vim/addons

" search path to :find and siblings
set path+=**

" general file automagic
filetype on
filetype plugin on
filetype indent on
syntax on
set cindent
set nofoldenable

set wildignore+=*.o,*.so,*.d

set mouse=a

" default encoding: always UTF-8
set termencoding=utf-8
set encoding=utf-8
set fileencoding=utf-8
set scrolloff=3

" what backspace removes
set backspace=indent,eol,start

" show match in insert mode
set showmatch
set wrapscan
set incsearch
set ignorecase
set smartcase
set hlsearch

" Tab size
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab

set ruler

" always show in which editing mode vim is
set showmode

" show info on the last/current command
set showcmd

" always display status lines for each window
set laststatus=2

" timeouts on mappings and key codes
set timeout timeoutlen=1500 ttimeoutlen=50

set hidden

" write changes before changing buffers, :make and others
set autowrite autowriteall

" write any file without the need for a !
set writeany

" no annoying error noises
set noerrorbells novisualbell

" always report the number of lines changed
set report=0

" no double spaces when joining lines
set nojoinspaces

" don't use modelines, use securemodelines
set nomodeline

" for :X
" but this probably doesn't work
" I'll need to set the crypt method manually before :X
if version >= 740
  setg cryptmethod=blowfish2
elseif version >= 730
  setg cryptmethod=blowfish
endif

" Move between splits with CTRL+[hjkl]
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" in insert mode, arrow keys move between display lines
inoremap <up> <C-O>gk
inoremap <down> <C-O>gj

" Toggle paste mode (particularly useful to temporarily disable autoindent)
set pastetoggle=<F3>

" Toggle spelling and show its status
" To create the vim spell file from myspell files run
" :mkspell! ~/.vim/spell/pt.utf-8.spl /usr/share/myspell/pt
noremap <F7> :setlocal spelllang=en spell! spell?<CR>
noremap <F8> :setlocal spelllang=pt spell! spell?<CR>

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
map <F5> :setlocal list! list?<CR>

" return the cursor to where it was when reopening the file
autocmd BufReadPost *
	\	if line("'\"") > 0 && line("'\"") <= line("$") |
	\		exe "normal g`\"" |
	\	endif

" setf sets the filetype *if* it was not set yet
au BufNewFile,BufRead *.pgc,*.pgh setf esqlc
" setlocal filetype forces the file type when default detection fails
au BufNewFile,BufRead *.md setlocal filetype=markdown expandtab textwidth=80
au BufNewFile,BufRead *.wiki setlocal textwidth=80
au BufNewFile,BufRead *.glsl setlocal filetype=c
au BufNewFile,BufRead *.exlib setlocal filetype=sh
au BufNewFile,BufRead *.exheres-0 setlocal filetype=sh
au BufNewFile,BufRead *.yml,*.yaml setlocal ts=2 st=2 sw=2 et
au BufNewFile,BufRead Vagrantfile setlocal filetype=ruby
au BufNewFile,BufRead *.js setlocal expandtab tabstop=2 softtabstop=2
au BufRead *.data,*.out setlocal ft=csv | :let b:csv_delim='	'
let g:csv_default_delim='	'

colorscheme darkblue


" PLUGINS

" latex: disable imaps plugin if it exists
let did_latexSuite_disabled=0

" ctrlp:
let g:ctrlp_working_path_mode = 'ra'

" airline:
let g:airline_theme='murmur'

" netrw: Toggle the sidebar file browser
let g:netrw_home=&backupdir
let g:netrw_liststyle=4
map <F2> :Lexplore<CR>
imap <F2> <C-O><F2>

" FUNCTIONS

map <F4> :call ToggleHex()<CR>

" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

let g:vimwiki_list = [{'path': '~/wiki', 'path_html' : '/srv/www/htdocs/', 'auto_export': 1, 'auto_toc': 1, 'template_path': '~/wiki/templates', 'template_default': 'default', 'template_ext': '.html'}]
let g:vimwiki_html_header_numbering = 4

" Load plugins managed by pathogen
call pathogen#infect()
